//ROS typedefs
#include "ros/ros.h"
#include <tf/tfMessage.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

/* protected region user include files on begin */
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>

/* BRICS_3D includes */
#include <brics_3d/core/HomogeneousMatrix44.h>
#include <brics_3d/algorithm/registration/IterativeClosestPoint.h>
#include <brics_3d/util/PCLTypecaster.h>

typedef pcl::PointXYZ PointType;
/* protected region user include files end */

class Registrator_config
{
public:

};

class Registrator_data
{
// autogenerated: don't touch this class
public:
//input data
    	sensor_msgs::PointCloud2 in_dataPointCloud;
    	sensor_msgs::PointCloud2 in_modelPointCloud;
  
	
//output data
    	tf::tfMessage out_transform;
 

};

class Registrator_impl
{
	/* protected region user member variables on begin */
	brics_3d::IRegistration* registrator;
	/* protected region user member variables end */

public:
    Registrator_impl() 
    {
        /* protected region user constructor on begin */
		/* protected region user constructor end */
    }
    void configure(Registrator_config config) 
    {
        /* protected region user configure on begin */
    	registrator = new brics_3d::IterativeClosestPoint();
		/* protected region user configure end */
    }
    void update(Registrator_data &data, Registrator_config config)
    {
        /* protected region user update on begin */
    	pcl::PointCloud<PointType>::Ptr dataPointCloutPcl(new pcl::PointCloud<PointType>);
    	pcl::PointCloud<PointType>::Ptr modelPointCloutPcl(new pcl::PointCloud<PointType>);
    	pcl::fromROSMsg(data.in_dataPointCloud, *dataPointCloutPcl);
    	pcl::fromROSMsg(data.in_modelPointCloud, *modelPointCloutPcl);

    	brics_3d::PointCloud3D dataPointCloud;
    	brics_3d::PointCloud3D modelPointCloud;


    	brics_3d::PCLTypecaster caster;
    	caster.convertToBRICS3DDataType(dataPointCloutPcl, &dataPointCloud);
    	caster.convertToBRICS3DDataType(modelPointCloutPcl, &modelPointCloud);
    	brics_3d::HomogeneousMatrix44* resultTransform = new brics_3d::HomogeneousMatrix44();

    	ROS_INFO("Registering.");
    	registrator->match(&modelPointCloud, &dataPointCloud, resultTransform);

    	ROS_INFO_STREAM("resulting transform = " << std::endl << resultTransform);

    	delete resultTransform;
		/* protected region user update end */
    }

    
    /* protected region user additional functions on begin */
	/* protected region user additional functions end */
    
};
