//ROS typedefs
#include "ros/ros.h"
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

/* protected region user include files on begin */
/* PCL includes */
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>

/* BRICS_3D includes */
#include <brics_3d/algorithm/filtering/Octree.h>
#include <brics_3d/util/PCLTypecaster.h>

/* protected region user include files end */

class Filter_config
{
public:
		std::string packedParameterSet;
		double octreeCellSize;

};

class Filter_data
{
// autogenerated: don't touch this class
public:
//input data
    	sensor_msgs::PointCloud2 in_inputPointCloud;
  
	
//output data
    	sensor_msgs::PointCloud2 out_outputPointCloud;
 

};

class Filter_impl
{
	/* protected region user member variables on begin */
	brics_3d::IFiltering* filter;
	/* protected region user member variables end */

public:
    Filter_impl() 
    {
        /* protected region user constructor on begin */
		/* protected region user constructor end */
    }
    void configure(Filter_config config) 
    {
        /* protected region user configure on begin */
    	filter = new brics_3d::Octree();
		/* protected region user configure end */
    }
    void update(Filter_data &data, Filter_config config)
    {
        /* protected region user update on begin */
    	//Declaration and instantiation of a cloud pointer to be used for output
    	std::string referenceFrameId;
    	referenceFrameId = data.in_inputPointCloud.header.frame_id;
    	pcl::PointCloud<pcl::PointXYZ>::Ptr inputPointCloutPcl(new pcl::PointCloud<pcl::PointXYZ>);
    	pcl::PointCloud<pcl::PointXYZ>::Ptr outputPointCloutPcl(new pcl::PointCloud<pcl::PointXYZ>);
    	pcl::fromROSMsg(data.in_inputPointCloud, *inputPointCloutPcl);

    	brics_3d::PointCloud3D inputPointCloud;
    	brics_3d::PointCloud3D outputPointCloud;


    	brics_3d::PCLTypecaster caster;
    	caster.convertToBRICS3DDataType(inputPointCloutPcl, &inputPointCloud);

    	ROS_INFO("Filtering.");
    	brics_3d::Octree* filterConfig;
    	filterConfig = dynamic_cast<brics_3d::Octree*>(filter);
    	if (filterConfig !=0) {
    		filterConfig->setVoxelSize(config.octreeCellSize);
    		ROS_INFO_STREAM("	using setVoxelSize = " << filterConfig->getVoxelSize());
    	}
    	filter->filter(&inputPointCloud, &outputPointCloud);

    	caster.convertToPCLDataType(outputPointCloutPcl, &outputPointCloud);
    	pcl::toROSMsg(*outputPointCloutPcl, data.out_outputPointCloud);
    	data.out_outputPointCloud.header.frame_id = referenceFrameId;
    	/* protected region user update end */
    }

    
    /* protected region user additional functions on begin */
	/* protected region user additional functions end */
    
};
