//ROS typedefs
#include "ros/ros.h"
#include <geometry_msgs/PoseStamped.h>
#include <brics_3d_msgs/GetSceneObjects.h>

/* protected region user include files on begin */
/* protected region user include files end */

class scene_model_config
{
public:

};

class scene_model_data
{
// autogenerated: don't touch this class
public:
//input data
    	geometry_msgs::PoseStamped in_detected_poses;
  
	
//output data
 

};

class scene_model_impl
{
	/* protected region user member variables on begin */
	geometry_msgs::PoseStamped current_object_pose_;
	/* protected region user member variables end */

public:
    scene_model_impl() 
    {
        /* protected region user constructor on begin */
    	current_object_pose_.pose.position.x = 0;
    	current_object_pose_.pose.position.y = 0;
    	current_object_pose_.pose.position.z = 0;
		/* protected region user constructor end */
    }
    void configure(scene_model_config config) 
    {
        /* protected region user configure on begin */
		/* protected region user configure end */
    }
    void update(scene_model_data &data, scene_model_config config)
    {
        /* protected region user update on begin */
    	current_object_pose_ = data.in_detected_poses;
		/* protected region user update end */
    }

	bool callback_get_scene_objects(brics_3d_msgs::GetSceneObjects::Request  &req, brics_3d_msgs::GetSceneObjects::Response &res , scene_model_config config)
	{
		/* protected region user implementation of service callback for get_scene_objects on begin */
		res.results.sceneObjects.resize(1);
		res.results.sceneObjects[0].id = 0;
		res.results.sceneObjects[0].transform.header = current_object_pose_.header;

		res.results.sceneObjects[0].transform.transform.translation.x = current_object_pose_.pose.position.x;
		res.results.sceneObjects[0].transform.transform.translation.y = current_object_pose_.pose.position.y;
		res.results.sceneObjects[0].transform.transform.translation.z = current_object_pose_.pose.position.z;

		res.results.sceneObjects[0].transform.transform.rotation.x = current_object_pose_.pose.orientation.x;
		res.results.sceneObjects[0].transform.transform.rotation.y = current_object_pose_.pose.orientation.y;
		res.results.sceneObjects[0].transform.transform.rotation.z = current_object_pose_.pose.orientation.z;
		res.results.sceneObjects[0].transform.transform.rotation.w = current_object_pose_.pose.orientation.w;


		/* protected region user implementation of service callback for get_scene_objects end */
		return true;
	}
    
    /* protected region user additional functions on begin */
	/* protected region user additional functions end */
    
};
